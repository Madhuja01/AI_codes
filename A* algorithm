from collections import deque
 
class Graph:
    def __init__(self, graph):
        self.graph = graph
 
    def get_neighbors(self, v):
        return self.graph[v]

    def h(self, n):
        H = {
            'A': 1,
            'B': 1,
            'C': 1,
            'D': 1,
            'E': 1,
            'F': 1,
            'G': 1,
            'H': 1,
            'I': 1,
            'J': 1
        }
 
        return H[n]
 
    def a_star_algorithm(self, start, stop):
        open_list = set([start])
        closed_list = set([])
        
        list1 = {}
        list1[start] = 0
 
        list2 = {}
        list2[start] = start
 
        while len(open_list) > 0:
            n = None

            for v in open_list:
                if n == None or list1[v] + self.h(v) < list1[n] + self.h(n):
                    n = v;
 
            if n == None:
                print('Path does not exist!')
                return None

            if n == stop:
                reconst_path = []
 
                while list2[n] != n:
                    reconst_path.append(n)
                    n = list2[n]
 
                reconst_path.append(start)
 
                reconst_path.reverse()
 
                print('Path Found: {}'.format(reconst_path))
                return reconst_path
 
            for (m, weight) in self.get_neighbors(n):
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    list2[m] = n
                    list1[m] = list1[n] + weight
                else:
                    if list1[m] > list1[n] + weight:
                        list1[m] = list1[n] + weight
                        list2[m] = n
 
                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)
            open_list.remove(n)
            closed_list.add(n)
 
        print('Path does not exist!')
        return None

graph = {
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('B', 3), ('D', 1), ('E', 5)],
    'D': [('B', 2), ('C', 1), ('E', 8)],
    'E': [('C', 5), ('D', 8), ('I', 5), ('J', 5)],
    'F': [('A', 3), ('G', 1), ('H', 7)],
    'G': [('F', 1), ('I', 3)],
    'H': [('F', 7), ('I', 2)],
    'I': [('E', 5), ('G', 3), ('H', 2), ('J', 3)],
    'J': [('E', 5), ('I', 3)]
}
graph1 = Graph(graph)
graph1.a_star_algorithm('A', 'J')
